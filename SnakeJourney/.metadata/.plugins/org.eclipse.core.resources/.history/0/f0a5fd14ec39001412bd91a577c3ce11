package com.arhimag.games.omnomnom.Levels;

import android.graphics.Rect;

import com.arhimag.games.omnomnom.LevelSequence;
import com.arhimag.games.omnomnom.Settings;
import com.arhimag.games.omnomnom.Achievements.GameAchievement;
import com.arhimag.games.omnomnom.Maps.GameMap;

public class LevelAchievementsList extends GameLevel
{
	private int listNumber = 0;
	
	private int slideStartX = 0;
	private long slideStartTime = 0;
	private int slideX = 0;
	private boolean slide = false;
	
	private int slideAnimation = ANIMATION_STOP;
	
	public final static int ANIMATION_STOP = 0;
	public final static int ANIMATION_RIGHT = 1;
	public final static int ANIMATION_LEFT = -1;
	public final static int ANIMATION_NEXT = 2;
	public final static int ANIMATION_PREVIOUS = -2;

	private float animationSpeed;
	
	public static int achievementId;
	public static int achievementPosition;
	
	public LevelAchievementsList(  GameMap map )
	{
		super(map);

		pauseable = false;
			*/
		fillList();
		aqua = false;
		readyScreen = false;
	}
	
	
	public void update(float deltaTime, int snake_id )
	{
		/*if(!botMoved)
		{
			((Deykstra2AISnake)snakes[0]).nextTurn();
			((Deykstra2AISnake)snakes[1]).nextTurn();
			botMoved = true;
		}*/
		super.update(deltaTime, snake_id);
	}
	
	public int getListNumber()
	{
		return listNumber;
	}
	
	public boolean isSlide()
	{
		return slide;
	}
	
	public void setSlide(boolean newSlide)
	{
		if( slideAnimation == ANIMATION_STOP )
		{
			slide = newSlide;	
		}
	}
	
	public void activateSlide()
	{
		setSlide(true);
	}
	
	public void setSlideStartX( int newX )
	{
		if( slideAnimation == ANIMATION_STOP )
		{
			slideStartX = newX;
			slideStartTime = System.nanoTime();
		}
	}
	
	public void setSlideX( int newX )
	{
		if( slideAnimation == ANIMATION_STOP )
		{
			slideX = newX;
		}
	}
	
	public int getSlideX()
	{
		return slideX;
	}
	
	public int getSlideStartX()
	{
		return slideStartX;
	}
	
	public void startAnimationRight()
	{
		if(( slideAnimation == ANIMATION_STOP ) && (isListAvalible(listNumber + 1)))
		{
			setSlide(false);
			slideAnimation = ANIMATION_RIGHT;
			animationSpeed = (slideX - slideStartX) / ( (System.nanoTime() - slideStartTime) / 1000000000.0f );
		}
	}
	
	public void startAnimationLeft()
	{
		if(( slideAnimation == ANIMATION_STOP )  && (isListAvalible(listNumber - 1)))
		{
			setSlide(false);
			slideAnimation = ANIMATION_LEFT;
			animationSpeed = (slideX - slideStartX) / ( (System.nanoTime() - slideStartTime) / 1000000000.0f );
		}
	}
	
	public int getAnimation()
	{
		return slideAnimation;
	}
	
	public void setAnimation(int newAnimation)
	{
		slideAnimation = newAnimation;
	}
	
	public float getAnimationSpeed()
	{
		return animationSpeed;
	}
	
	public void activateSlide( int newX )
	{
		setSlideStartX(newX);
		setSlideX(newX);
		activateSlide();
	}
	
	public boolean isListAvalible( int listId )
	{
		return (listId * 4 <= Settings.getLastReachedLevel()) && (listId >= 0);
	}
	
	public void incAchievement()
	{
		
		if (achievementId < GameAchievement.achievementsList.length - (map.getMapHeight() / GameAchievement.textHeight) ) 
			achievementId++;
	}
	
	public void decListNumber()
	{
		if (achievementId > 0 ) 
			achievementId--;
	}	
}

