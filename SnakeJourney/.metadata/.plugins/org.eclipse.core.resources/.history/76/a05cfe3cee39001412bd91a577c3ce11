package com.arhimag.games.omnomnom.Screens;

import java.util.List;


import com.arhimag.games.omnomnom.Assets;
import com.arhimag.games.omnomnom.GameLevelDrawer;
import com.arhimag.games.omnomnom.LevelSequence;
import com.arhimag.games.omnomnom.Settings;
import com.arhimag.games.omnomnom.Levels.GameLevel;
import com.arhimag.games.omnomnom.Levels.LevelAchievementsList;
import com.arhimag.games.omnomnom.Levels.LevelLevelsList;
import com.arhimag.games.omnomnom.Maps.AchievementsListMap;
import com.arhimag.games.omnomnom.Maps.LevelsListMap;
import com.arhimag.games.omnomnom.framework.Game;
import com.arhimag.games.omnomnom.framework.Graphics;
import com.arhimag.games.omnomnom.framework.Input.KeyEvent;
import com.arhimag.games.omnomnom.framework.Input.TouchEvent;
import com.arhimag.games.omnomnom.framework.Screen;
import com.arhimag.games.omnomnom.framework.impl.AndroidGame;

public class AchievementsScreen extends Screen
{
	
	GameLevelDrawer levelDrawer;
	AndroidGame andrGame = (AndroidGame) game;
	
	public AchievementsScreen ( Game game )
	{
		super(game);
		andrGame = (AndroidGame) game;
		
		levelDrawer = new GameLevelDrawer( new LevelAchievementsList( new AchievementsListMap()), andrGame.getDisplayWidth() , andrGame.getDisplayHeight(), game.getGraphics());
		GameLevel.startPauseTimer();
	}

	@Override
	public void update (float deltaTime)
	{
		List<TouchEvent> touchEvents = game.getInput().getTouchEvents();
		List<KeyEvent> keyEvents = game.getInput().getKeyEvents(); 
		
		int len = keyEvents.size();
		
		this.levelDrawer.getLevel().update(deltaTime,this.levelDrawer.getLevel().getPlayerSnake());
		
		for(int i = 0; i < len; i++)
		{
			KeyEvent event = keyEvents.get(i);
			
			if(event.type == KeyEvent.KEY_UP)
			{
				if(event.keyCode == android.view.KeyEvent.KEYCODE_BACK)
				{
					game.setScreen(new MainMenuScreen(game));
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
					return;
				}
			}
		}
		
		len = touchEvents.size();
		for(int i = 0; i < len; i++)
		{
			TouchEvent event = touchEvents.get(i);
		
			if(event.type == TouchEvent.TOUCH_UP)
			{
				if (((LevelLevelsList)this.levelDrawer.getLevel()).isSlide())
				{
					if (java.lang.Math.abs(event.y - ((LevelAchievementsList)this.levelDrawer.getLevel()).getSlideStartY()) > andrGame.getDisplayHeight()/100 )
					{
						if( event.y > ((LevelAchievementsList)this.levelDrawer.getLevel()).getSlideStartX()) 
							((LevelLevelsList)this.levelDrawer.getLevel()).startAnimationLeft();
						else
							((LevelLevelsList)this.levelDrawer.getLevel()).startAnimationRight();
					}
					((LevelLevelsList)this.levelDrawer.getLevel()).setSlide(false);
				}
				else
				{ 
					if( levelDrawer.inBounds(event, ((LevelLevelsList)this.levelDrawer.getLevel()).getLtBounds()))
					{
						if( Settings.isSoundEnabled())
							Assets.eat.play(1);
						goToLevelTL();
						return;
					}

					if( levelDrawer.inBounds(event, ((LevelLevelsList)this.levelDrawer.getLevel()).getRtBounds()))
					{
						if( Settings.isSoundEnabled())
							Assets.eat.play(1);
						goToLevelTR();
						return;
					}

					if( levelDrawer.inBounds(event, ((LevelLevelsList)this.levelDrawer.getLevel()).getLbBounds()))
					{
						if( Settings.isSoundEnabled())
							Assets.eat.play(1);
						goToLevelBL();
						return;
					}

					if( levelDrawer.inBounds(event, ((LevelLevelsList)this.levelDrawer.getLevel()).getRbBounds()))
					{
						if( Settings.isSoundEnabled())
							Assets.eat.play(1);
						goToLevelBR();
						return;
					}

				}
			}
			else if( event.type == TouchEvent.TOUCH_DOWN )
			{
				/*
				 *  Для избежания реакции скрола на нажатие на кнопку мы сначала задаем стартовую координату, а только потом,
				 *  если палец сдвинется на сколько-то процентов от ширины экрана включим режим скрола. 
				 */
				((LevelLevelsList)this.levelDrawer.getLevel()).activateSlide(event.x);
				((LevelLevelsList)this.levelDrawer.getLevel()).setSlide(false);
			}
			else if( event.type == TouchEvent.TOUCH_DRAGGED )
				if((java.lang.Math.abs(event.x - ((LevelLevelsList)this.levelDrawer.getLevel()).getSlideStartX()) > andrGame.getDisplayWidth() / 100 ))
				{
					((LevelLevelsList)this.levelDrawer.getLevel()).setSlide(true);
					((LevelLevelsList)this.levelDrawer.getLevel()).setSlideX(event.x);
				}
				
		}
		/*len = touchEvents.size();
		
		for( int i = 0; i < len; i++)
		{
			TouchEvent event = touchEvents.get(i);
			if(event.type == TouchEvent.TOUCH_UP)
			{
				if( levelDrawer.inBounds(event, SettingsMap.getCloseBounds()))
				{
					game.setScreen(new MainMenuScreen(game));
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
					return;
				}
				if( levelDrawer.inBounds(event, SettingsMap.getSoundBounds()))
				{
					Settings.setSoundEnabled( ! Settings.isSoundEnabled() ); 
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
				}
				if( levelDrawer.inBounds(event, SettingsMap.getSlideBounds()))
				{
					Settings.setControl( 0 ); 
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
				}
				if( levelDrawer.inBounds(event, SettingsMap.getAccelBounds()))
				{
					Settings.setControl( 1 ); 
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
				}
				if( levelDrawer.inBounds(event, SettingsMap.getUprightdownleftBounds()))
				{
					Settings.setControl( 4 ); 
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
				}
				if( levelDrawer.inBounds(event, SettingsMap.getLeftrightBounds()))
				{
					Settings.setControl( 2 ); 
					if( Settings.isSoundEnabled())
						Assets.eat.play(1);
				}
				return;
			}
		}*/
	}
	
	@Override
	public void present(float deltaTime)
	{
		Graphics g = game.getGraphics();
		g.clear(0);
		levelDrawer.draw(deltaTime);		
	}
	
	@Override
	public void pause()
	{
	}
	
	@Override
	public void resume()
	{
	}
	
	@Override
	public void dispose()
	{
	}
	
}
