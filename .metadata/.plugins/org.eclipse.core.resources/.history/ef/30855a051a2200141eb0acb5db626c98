package com.arhimag.games.omnomnom.AI;

import java.util.LinkedList;
import java.util.Queue;

import com.arhimag.games.omnomnom.Snake;
import com.arhimag.games.omnomnom.Levels.GameLevel;

public class BFSAISnake extends Snake 
{
	GameLevel level;
	private int primeNumber;
	private int mapWidth;
	private int mapHeight;
	
	private int queque;
	private int quequeParents;
	private int quequeStart;
	private int quequeEnd;
	
		
	public BFSAISnake(GameLevel level, int x, int y, int primeNumber)
	{
		super(x,y);
		this.level = level;
		mapWidth = level.getMap().getMapWidth();
		mapHeight = level.getMap().getMapHeight();
	}

	/* 
	 * Алгоритм работы:
	 * Ищем точку, к которой будет стремиться змейка.
	 * Начинаем поиск в ширину с найденной точки до тех пор, пока не дойдем до головы змейки.
	 * у каждой клетки храним ее родителя. Следующая клетка - это клетка родитель.
	 */
	
	public 
	
/*	int bfsfood(int iteration)
	{
		int id;
		if( queue.size() > 0 )
			id = queue.poll();
		else 
			return -1;
		
		for(int neightboor = level.getMapGraphNeighbours(id, 0), i = 0; neightboor >= 0; neightboor = level.getMapGraphNeighbours(id, ++i) )
		{
			if( level.getIntTempMap(neightboor) == GameLevel.FOOD )
				return neightboor;
			if( level.getIntTempMap(neightboor) % primeNumber > 0 || level.getIntTempMap(neightboor) == 0 )
				queue.add(neightboor);
		}
		
	//	int way = bfsfood(iteration + 1)
		
		
	} */
	
	
	public void nextTurn()
	{
		//if( parts.size() > finishSize)
//			deykstraFinish();
//		else
//			deykstra();
//		direction = chooseDirection();
	}
}
