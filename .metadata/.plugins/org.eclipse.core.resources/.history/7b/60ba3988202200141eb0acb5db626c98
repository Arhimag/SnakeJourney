package com.arhimag.games.omnomnom.AI;

import java.util.LinkedList;
import java.util.Queue;

import com.arhimag.games.omnomnom.Snake;
import com.arhimag.games.omnomnom.Levels.GameLevel;

public class BFSAISnake extends Snake 
{
	GameLevel level;
	private int primeNumber;
	private int mapWidth;
	private int mapHeight;
	
	private int queque[];
	private int quequeParents[];
	private int quequeStart;
	private int quequeEnd;
	private int quequeSize;
	

	/* 
	 * Ёмулирование очереди массивом.
	 */
	
	/* 
	 * »нициализаци€ очереди. 
	 * «апускать только в конструкторе и только после того, как будут
	 * заданы размеры карты. ¬ переменных mapWidth*mapHeight 
	 */
	private void initQueque()
	{
		quequeSize = mapWidth*mapHeight / 4;
		queque = new int[quequeSize];
		quequeParents = new int[quequeSize];
		quequeStart = 0;
		quequeEnd = 0;
	}
	

	private void pushQueque(int vertex, int parent )
	{
		if( quequeEnd == quequeSize )
		{
			int temp[];
			
			temp = new int[quequeSize * 2];
			java.lang.System.arraycopy(queque, 0, temp, 0, quequeSize);
			queque = temp;
			temp = null;
			
			temp = new int[quequeSize * 2];
			java.lang.System.arraycopy(quequeParents, 0, temp, 0, quequeSize);
			quequeParents = temp;
			temp = null;
			
			quequeSize *= 2;
		}
		
		queque[quequeEnd] = vertex;
		quequeParents[quequeEnd] = parent;
		quequeEnd++;		
	}
	
	private int getQueque()
	{
		return queque[quequeStart];
	}
	
	private int getParentQueque()
	{
		return quequeParents[quequeStart];
	}
	
	private boolean isEmptyQueque()
	{
		return quequeStart < quequeEnd;
	}
	
	private int popQueque()
	{
		return queque[quequeStart++];
	}

	
	public BFSAISnake(GameLevel level, int x, int y, int primeNumber)
	{
		super(x,y);
		this.level = level;
		mapWidth = level.getMap().getMapWidth();
		mapHeight = level.getMap().getMapHeight();
		initQueque();
	}

	/* 
	 * јлгоритм работы:
	 * »щем точку, к которой будет стремитьс€ змейка.
	 * Ќачинаем поиск в ширину с найденной точки до тех пор, пока не дойдем до головы змейки.
	 * у каждой клетки храним ее родител€. —ледующа€ клетка - это клетка родитель.
	 */
	
	
	
/*	int bfsfood(int iteration)
	{
		int id;
		if( queue.size() > 0 )
			id = queue.poll();
		else 
			return -1;
		
		for(int neightboor = level.getMapGraphNeighbours(id, 0), i = 0; neightboor >= 0; neightboor = level.getMapGraphNeighbours(id, ++i) )
		{
			if( level.getIntTempMap(neightboor) == GameLevel.FOOD )
				return neightboor;
			if( level.getIntTempMap(neightboor) % primeNumber > 0 || level.getIntTempMap(neightboor) == 0 )
				queue.add(neightboor);
		}
		
	//	int way = bfsfood(iteration + 1)
		
		
	} */
	
	
	public void nextTurn()
	{
		//if( parts.size() > finishSize)
//			deykstraFinish();
//		else
//			deykstra();
//		direction = chooseDirection();
	}
}
