package com.arhimag.games.omnomnom.Levels;

import com.arhimag.games.omnomnom.Food;
import com.arhimag.games.omnomnom.PlayerSnake;
import com.arhimag.games.omnomnom.Snake;
import com.arhimag.games.omnomnom.SnakePart;
import com.arhimag.games.omnomnom.AI.BFSAISnake;
import com.arhimag.games.omnomnom.AI.BridgeAISnake;
import com.arhimag.games.omnomnom.GameElements.Teleport;
import com.arhimag.games.omnomnom.Maps.GameMap;
import com.arhimag.games.omnomnom.framework.Point;

public class LevelSprint extends GameLevel
{
	private int currentPlayerFoodId = 0;
	private int playerFoodDirection = -1;
	private int currentAIFoodId = 0;
	private int aIFoodDirection = -1;
	private static int playerFoods[][] =
		{
		{5,15},
		{10, 14},
		{14,13},
		{14,11},
		{3, 10},
		{14, 7},
		{8,6},
		};
	
	private static int aiFoods[][] =
		{
		{30,18},
		{30, 14},
		{30,12},
		{30,9},
		{30, 7},
		{30, 5},
		{30, 3},
		};
	
	public LevelSprint(  GameMap map )
	{
		super(map);
		
		int snakeStartX = 10;
		int snakeStartY = 18;
	
		snakes = new Snake[2];
		moved = new boolean[2];

		snakes[0] = new PlayerSnake(snakeStartX, snakeStartY);
		snakes[0].parts.add(new SnakePart(snakeStartX - 1, snakeStartY));
		snakes[0].parts.add(new SnakePart(snakeStartX - 2, snakeStartY));
		snakes[0].lastx = snakeStartX - 3;
		snakes[0].lasty = snakeStartY;
		snakes[0].direction = Snake.RIGHT;
		snakes[0].finishSize = 9;
	
		snakes[1] = new BFSAISnake(this, map.getMapWidth() / 2, map.getMapHeight() - 3, 7);
		snakes[1].parts.add(new SnakePart(map.getMapWidth() / 2 + 1 , map.getMapHeight() - 3));
		snakes[1].parts.add(new SnakePart(map.getMapWidth() / 2 + 2, map.getMapHeight() - 3));
		snakes[1].parts.add(new SnakePart(map.getMapWidth() / 2 + 3, map.getMapHeight() - 3));
		snakes[1].lastx = map.getMapWidth()/2  + 4;
		snakes[1].lasty = map.getMapHeight() - 3;
		snakes[1].direction = Snake.UP;
		snakes[1].setBodyColor( 0xffeeeeaa );
		snakes[1].finishSize = 9;
		
		food = new Food[2];
		food[0] = new Food( snakeStartX + 3, snakeStartY);
		food[1] = new Food( snakeStartX + 5, snakeStartY);
		
		generateNewFood(0);
		generateNewFood(1);
		
		finishes = new Point[4];
		
		finishes[0] = new Point(15,3);
		finishes[1] = new Point(16,3);
		finishes[2] = new Point(15,18);
		finishes[3] = new Point(16,18);
		
	
		aqua = true;
		pauseButton = true;
		winLength = 30;
	}
	
	public void update(float deltaTime, int snake_id )
	{
		if(!botMoved)
		{
			((BFSAISnake)snakes[1]).nextTurn();
			botMoved = true;
		}
		super.update(deltaTime, snake_id);
	}

	protected void genereateNewFood(int i )
	{
		if( i == 0 ) // Еда игрока
		{
			if( currentPlayerFoodId == playerFoods.length - 1  || currentPlayerFoodId == 0 )
				playerFoodDirection *= -1;
			currentPlayerFoodId += playerFoodDirection;
			food[i].x = playerFoods[currentPlayerFoodId][0];
			food[i].y = playerFoods[currentPlayerFoodId][1];
		}
		else
		{
			if( currentAIFoodId == aiFoods.length - 1  || currentAIFoodId == 0 )
				aIFoodDirection *= -1;
			currentAIFoodId += aIFoodDirection;
			food[i].x = aiFoods[currentAIFoodId][0];
			food[i].y = aiFoods[currentAIFoodId][1];
		}
	}
}
