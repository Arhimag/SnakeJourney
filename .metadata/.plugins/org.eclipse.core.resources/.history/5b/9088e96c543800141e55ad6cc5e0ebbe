package com.arhimag.games.omnomnom.GameElements;

import android.util.Log;

import com.arhimag.games.omnomnom.GameLevelDrawer;

public class Alphabet 
{
	//Константа задающая расстояние между символами 
	private static final int charSpace = 1;
	//Константа задающаю ширину пробела. Суммируется с расстоянием между символами
	private static final int wordSpace = 2;
	//Константа задающая расстояние между строками.
	private static final int lineSpace = 1;
	
	private static final char alphabet[][][] = {
			{
				{'_','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'}
			},
			{                   
				{'#','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','_','_','_','_'},
				{'#','_','_','_','#'},
				{'_','#','#','#','_'}
			},
			{                   
				{'#','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','#'},
				{'#','_','_','_','_'},
				{'_','#','#','_','_'},
				{'#','_','_','_','_'},
				{'_','#','#','#','#'}
			},
			{                   
				{'#','#','#','#','#'},
				{'#','_','_','_','_'},
				{'#','#','#','#','#'},
				{'#','_','_','_','_'},
				{'#','_','_','_','_'}
			},
			{                   
				{'_','#','#','#','#'},
				{'#','_','_','_','_'},
				{'#','_','_','#','#'},
				{'#','_','_','_','#'},
				{'_','#','#','#','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','#','#','#','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'}
			},
			{                   
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'#','_','#','_','_'},
				{'_','#','_','_','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','_','_','#','_'},
				{'#','#','#','_','_'},
				{'#','_','_','#','_'},
				{'#','_','_','_','#'}
			},
			{                   
				{'#','_','_','_','_'},
				{'#','_','_','_','_'},
				{'#','_','_','_','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','#'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','#','_','#','#'},
				{'#','_','#','_','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','#','_','_','#'},
				{'#','_','#','_','#'},
				{'#','_','_','#','#'},
				{'#','_','_','_','#'}
			},
			{                   
				{'_','_','#','_','_'},
				{'_','#','_','#','_'},
				{'#','_','_','_','#'},
				{'_','#','_','#','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'#','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','_'},
				{'#','_','_','_','_'},
				{'#','_','_','_','_'}
			},
			{                   
				{'_','#','#','_','_'},
				{'#','_','_','#','_'},
				{'#','_','_','#','_'},
				{'#','_','_','#','_'},
				{'_','#','#','_','#'}
			},
			{                   
				{'#','#','#','#','_'},
				{'#','_','_','_','#'},
				{'#','#','#','#','_'},
				{'#','_','_','#','_'},
				{'#','_','_','#','_'}
			},
			{                   
				{'_','#','#','#','#'},
				{'#','_','_','_','_'},
				{'_','#','#','#','_'},
				{'_','_','_','_','#'},
				{'#','#','#','#','_'}
			},
			{                   
				{'#','#','#','#','#'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'_','#','#','#','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'_','#','_','#','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'#','_','_','_','#'},
				{'#','_','#','_','#'},
				{'#','_','#','_','#'},
				{'_','#','_','#','_'}
			},
			{                   
				{'#','_','_','_','#'},
				{'_','#','_','#','_'},
				{'_','_','#','_','_'},
				{'_','#','_','#','_'},
				{'#','_','_','_','#'}
				},
			{                   
				{'#','_','_','_','#'},
				{'_','#','_','#','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'#','#','#','#','#'},
				{'#','_','_','#','_'},
				{'_','_','#','_','_'},
				{'_','#','_','_','#'},
				{'#','#','#','#','#'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','#','_','#','_'},
				{'_','#','_','#','_'},
				{'_','#','_','#','_'},
				{'_','#','#','#','_'}
			},	
			{                   
				{'_','_','#','_','_'},
				{'_','#','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','_','#','_','_'},
				{'_','#','_','_','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','_','#','_','_'},
				{'_','_','_','#','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','_','#','_'},
				{'_','#','_','#','_'},
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','_','_','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','#','_','_','_'},
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','#','_','_','_'},
				{'_','#','#','#','_'},
				{'_','#','_','#','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'},
				{'_','_','#','_','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','#','_','#','_'},
				{'_','_','#','_','_'},
				{'_','#','_','#','_'},
				{'_','#','#','#','_'}
			},
			{                   
				{'_','#','#','#','_'},
				{'_','#','_','#','_'},
				{'_','#','#','#','_'},
				{'_','_','_','#','_'},
				{'_','#','#','#','_'}
			}
		};

	public static int getLetterWidth()
	{
		return alphabet[0][0].length;
	}
	
	public static int getLetterHeight()
	{
		return alphabet[0].length;
	}
	
	public static int getLetterPixel(char letter, int x, int y)
	{
		int letterId = ((int)Character.toUpperCase(letter) - (int)'A');
		
		if( letterId > 25)
		{
			letterId = 0;
			Log.d("Alphabet", "Not correct letter access " + letter);
		}
		
		if(( letterId >= ((int)'0' - (int)'A')) && (letterId <= ((int)'9' - (int)'A')))
		{
			letterId = 26 + letterId + (int)'A' - (int)'0';  
		}
		else
		{
			letterId = 0;
			Log.d("Alphabet", "Not correct number access " + letter);
		}
		
		if( x < 0 || x >= getLetterWidth())
		{
			x = 0;
			Log.d("Alphabet", "Not correct x  " + x);
		}
		
		if( y < 0 || y >= getLetterHeight())
		{
			y = 0;
			Log.d("Alphabet", "Not correct y  " + y);
		}
		
		return GameLevelDrawer.getColor(alphabet[letterId][y][x], x , y);
	}
	
	public static void writeLetter( char letter, int[][] canvas, int startX, int startY )
	{
		if(canvas.length - startY < getLetterHeight() || canvas[0].length - startX < getLetterWidth() )
		{	
			Log.d("Alphabet", "Not correct parametres (" + startX + " , " + startY + ")");
			return;
		}
		
		for(int x = 0; x < getLetterWidth(); x++ )
			for(int y = 0; y < getLetterHeight(); y++ )
				canvas[startY + y][startX + x] = getLetterPixel(letter, x, y);
	}
	
	public static int getPhraseLength( String phrase )
	{
		int phraseLength = 0;
		
		for( int i = 0; i < phrase.length(); i++ )
			phraseLength += ((phrase.charAt(i) == ' ')?(charSpace+wordSpace):(alphabet[0][0].length + charSpace));
		
		//После последней буквы не нужен пропуск
		
		return phraseLength - charSpace;
	}
	
	public static void writePhraseLine( String phrase, int[][] canvas, int startY)
	{
		int phraseLength = 0;
		for( int i = 0; i < phrase.length(); i++ )
			phraseLength += ((phrase.charAt(i) == ' ') 
	}
}

}